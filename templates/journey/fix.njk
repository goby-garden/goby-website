<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta http-equiv="Content-Type" content="text/html;" charset="utf-8" >
    <meta name="viewport" charset="UTF-8" content="width=device-width, initial-scale=1">
    <title>Goby: a primer</title>
    <link rel="stylesheet" href="../css/clearstyle.css">
  </head>
  <style media="screen">
    .slide{
      width:100%;
      height:100vh;
      border:1px solid black;
      box-sizing:border-box;
    }
  </style>
  <body>
    <div class="slide">

    </div>
    <div class="slide" data-ind="1">

    </div>
    <div class="slide">

    </div>

    <script type="text/javascript">
      let ind=0;
      let observers=[];
      const presentSteps = [];
      let topDist = window.scrollY;

      window.addEventListener('load',function(){



        createObserver({
          root: null,
          rootMargin: `${document.body.clientHeight}px 0px -50% 0px`,
          threshold: [0.01, 0.99],
          callback: intersectionControl,
          step: '.slide',
        });

        window.addEventListener('keydown',function(){
          event.preventDefault();

          if(event.key=='ArrowRight'){
            console.log('ind:',ind);
            let next=document.querySelector(`.slide[data-step="${ind == 7? 1 : ind + 1 }"]`);
            let scrolltop=next.offsetTop;
            window.scroll({
              top:scrolltop,
              left:0,
              behavior:'smooth'
            })
            console.log(next,scrolltop);
            // next.scrollIntoView();
          }else if(event.key=='ArrowLeft'){
            let back=document.querySelector(`.slide[data-step="${ind == 0? 7 : ind - 1 }"]`);
            // back.scrollIntoView();
            let scrolltop=back.offsetTop;
            console.log(scrolltop)
            window.scroll({
              top:scrolltop,
              left:0,
              behavior:'smooth'
            })
            console.log(back)
          }

        })
      })



      function intersectionControl(entries){
        entries.forEach((item, i) => {
          let allIn = item.intersectionRatio >= 0.99;
          let allOut = item.intersectionRatio <= 0.01;
          let step=item.target;

          if(!allIn&&!allOut){
            ind=parseInt(step.dataset.step);
            console.log(ind);
          }

          // if(step.dataset.vidtrigger){
          //   let vid=document.querySelector(`.wrap[data-viditem="${step.dataset.vidtrigger}"]`);
          //   if(!allIn&&!allOut){
          //     vid.classList.remove('hide');
          //   }else{
          //     vid.classList.add('hide');
          //   }
          // }
        });

      }

      //



      function createObserver(d) {
        let callback = d.callback;

        let options = {
          root: d.root,
          rootMargin: d.rootMargin,
          threshold: d.threshold,
        };

        let storedVals = [];

        observers.push(new IntersectionObserver(callback.bind(topDist), options));
        let ind = observers.length - 1;

        presentSteps.push(0);
        let currentObserver = observers[ind];
        let presentStep = presentSteps[ind];
        let currentInd = observers.length - 1;
        document.querySelectorAll(d.step).forEach((item, i) => {
          storedVals.push({ ind: i, y: Infinity, r: 0, entered: false });
          item.dataset.step = i;
          item.dataset.global = ind;
          item.dataset.pos='out';
          currentObserver.observe(item);
        });
      }
    </script>

  </body>
</html>
